#!/usr/bin/env python3

import argparse
import requests

from vulnerabilitylookup import VulnerabilityLookup


def main(cve: str = "", time_series: bool = False) -> None:
    """Imports EPSS scores in the storage.
    Exploit Prediction Scoring System (EPSS)
    https://www.first.org/epss/api
    """
    vulnerability_lookup = VulnerabilityLookup()
    url_api = "https://api.first.org/data/v1/epss?"
    query = {}
    if time_series:
        query["scope"] = "time-series"

    if cve:
        query["cve"] = cve
        r = requests.get(url_api, params=query, timeout=300)
        r.raise_for_status()
        epss_value = r.json()
        for elem in epss_value["data"]:
            if time_series:
                for epss in elem["time-series"]:
                    print(epss)
            else:
                print(elem)
    else:
        # Iterate over all CVE Ids from the storage
        for vuln in vulnerability_lookup.get_all("nvd", with_meta=True):
            query["cve"] = vuln["cveMetadata"]["cveId"]
            r = requests.get(url_api, params=query, timeout=300)
            r.raise_for_status()
            epss_value = r.json()
            print(epss_value["data"])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Imports EPSS scores in the storage from the first API."
    )
    parser.add_argument(
        "--cve",
        help="Import EPSS score for CVE XXXXX from the FIRST.",
        default="CVE-2024-6670",
    )
    parser.add_argument(
        "--time-series",
        help="Imports the EPSS scores for CVE XXXX for each of the past 30 days",
        action="store_true",
    )
    args = parser.parse_args()
    main(args.cve, args.time_series)
