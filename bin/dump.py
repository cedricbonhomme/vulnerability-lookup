#!/usr/bin/env python3

from __future__ import annotations

import argparse
import json
import logging

import logging.config

from vulnerabilitylookup import VulnerabilityLookup
from vulnerabilitylookup.default import get_config, get_homedir, safe_create_dir

logging.config.dictConfig(get_config("logging"))


class Dump:
    def __init__(self) -> None:
        self.vl = VulnerabilityLookup()
        self.root_dumps = get_homedir() / "dumps"
        safe_create_dir(self.root_dumps)

    def dump(self, feed: str, /) -> None:
        dest_file = self.root_dumps / f"{feed}.json"
        dest_file.unlink(missing_ok=True)
        for vuln in self.vl.get_all(feed):
            with dest_file.open("a") as f:
                json.dump(vuln, f)


def main() -> None:
    parser = argparse.ArgumentParser(description="Dump vulnerability-lookup storage in NDJSON.")
    parser.add_argument("--feed", help="Feed to dump. Default is set to nvd.", default="nvd")
    args = parser.parse_args()
    d = Dump()
    d.dump(args.feed)


if __name__ == "__main__":
    main()
