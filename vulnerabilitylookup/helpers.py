#!/usr/bin/env python3

import re
import sys
import configparser

from datetime import datetime
from typing import Dict

from .default import get_homedir  # , get_config


def fromisoformat_wrapper(date_iso: str, /) -> datetime:
    if sys.version_info < (3, 11):
        if "." in date_iso:
            # let's just ignore the miliseconds
            date_iso = date_iso.rsplit(".")[0] + "+00:00"
        if date_iso.endswith("Z"):
            # Python < 3.11 cannot load times with a Z instead of +00:00
            date_iso = date_iso.replace("Z", "+00:00")

        # Sometimes, the string also contains nanoseconds for no good reason, and it fails with python < 3.11
        # Is is useless so we strip that.
        frac_sec = re.findall(r"[.](\d+)", date_iso)
        if frac_sec and len(frac_sec[0]) > 6:
            date_iso = date_iso.replace(frac_sec[0], frac_sec[0][:6])

    return datetime.fromisoformat(date_iso)


def get_config_feeder(feeder_name: str) -> Dict[str, str]:
    modules_config_file = get_homedir() / "config" / "modules.cfg"
    if not modules_config_file.exists():
        modules_config_file = get_homedir() / "config" / "modules.cfg.sample"

    config = configparser.ConfigParser()
    config.read(modules_config_file)
    if f"feeder:{feeder_name}" in config:
        return dict(config.items(f"feeder:{feeder_name}"))
    return {}
