from typing import Any

import re
import secrets
from urllib.parse import urlparse
from datetime import datetime

import pyotp
from pyotp.totp import TOTP
from flask import url_for
from flask_login import UserMixin  # type: ignore[import-untyped]
from sqlalchemy.orm import validates
from the_big_username_blacklist import validate  # type: ignore[import-untyped]
from validate_email import validate_email  # type: ignore[import-untyped]
from werkzeug.security import check_password_hash

from website.web.bootstrap import db
from website.web.bootstrap import application


def generate_token() -> str:
    return secrets.token_urlsafe(64)


class User(db.Model, UserMixin):  # type: ignore[name-defined, misc]
    """
    Represent a user. Logins and api keys are unique, emails addresses are not.
    """

    id = db.Column(db.Integer, primary_key=True)
    login = db.Column(db.String(30), unique=True, nullable=False)
    name = db.Column(db.String(50), nullable=False)
    organisation = db.Column(db.String(50), default="")
    pwdhash = db.Column(db.String(), nullable=False)
    secret_token = db.Column(db.String(), unique=True)
    is_two_factor_authentication_enabled = db.Column(
        db.Boolean, nullable=False, default=False
    )
    email = db.Column(db.String(256), nullable=False)
    created_at = db.Column(db.DateTime(), default=datetime.now)
    last_seen = db.Column(db.DateTime(), default=datetime.now)
    apikey = db.Column(db.String(100), default=generate_token, unique=True)

    is_active = db.Column(db.Boolean(), default=True)
    is_confirmed = db.Column(db.Boolean(), default=False)

    # user rights
    is_admin = db.Column(db.Boolean(), default=False)
    is_commenter = db.Column(db.Boolean(), default=True)
    is_reporter = db.Column(db.Boolean(), default=False)

    # relationships
    comments = db.relationship("Comment", backref="author", lazy="dynamic")
    bundles = db.relationship("Bundle", backref="author", lazy="dynamic")

    def __init__(self, **kwargs: Any):
        super().__init__(**kwargs)
        if self.secret_token is None:
            self.secret_token = pyotp.random_base32()

    def get_id(self) -> int:
        """
        Return the id of the user.
        """
        return self.id

    def check_password(self, password: str) -> bool:
        """
        Check the password of the user.
        """
        return check_password_hash(self.pwdhash, password)

    def generate_apikey(self) -> str:
        self.apikey = generate_token()
        return self.apikey

    def __str__(self) -> str:
        return "Login: {}\nLast seen: {}\nIs active: {}\nIs admin: {}".format(
            self.login, self.last_seen, self.is_active, self.is_admin
        )

    @validates("login")
    def validates_login(self, key: str, value: str) -> str:
        assert 3 <= len(value) <= 30, AssertionError("Maximum length for login: 30")
        if value != "admin":
            assert validate(value), AssertionError("Username not allowed.")
        return re.sub("[^a-zA-Z0-9_-]", "", value.strip())

    @validates("email")
    def validates_email(self, key: str, value: str) -> str:
        assert 3 <= len(value) <= 256, AssertionError("Maximum length for email: 256")
        assert validate_email(value), AssertionError("Email address not valid")
        return value

    @validates("name")
    def validates_name(self, key: str, value: str) -> str:
        assert 3 <= len(value) <= 256, AssertionError("Maximum length for name: 256")
        value = value.strip()
        return value

    @validates("organisation")
    def validates_organisation(self, key: str, value: str) -> str:
        assert 3 <= len(value) <= 256, AssertionError(
            "Maximum length for organisation: 256"
        )
        value = value.strip()
        return value

    @validates("apikey")
    def validates_apikey(self, key: str, value: str) -> str:
        assert 30 <= len(value) <= 100, AssertionError("Minimum length for apikey: 30")
        return value

    @staticmethod
    def make_valid_login(login: str) -> str:
        return re.sub("[^a-zA-Z0-9_-]", "", login)

    def get_authentication_setup_uri(self) -> str:
        """Returns the authentication URI for the Two-Factor Authentication as a string."""
        image_url = url_for("static", filename="favicon.ico", _external=True)
        image_uri = urlparse(image_url)
        if image_uri.scheme != "https":
            image_url = ""
        return pyotp.totp.TOTP(self.secret_token).provisioning_uri(
            name=self.login, issuer_name=application.config["APP_NAME"], image=image_url
        )

    def is_otp_valid(self, user_otp: Any) -> bool:
        """Checks the validity of a One Time password."""
        totp: TOTP = pyotp.parse_uri(self.get_authentication_setup_uri())  # type: ignore
        return totp.verify(user_otp)
